import tkinter as tk
from tkinter import font, messagebox
import random
import time

class AmidakujiApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Amidakuji Seat Shuffler")
        # --- Modern UI Colors ---
        self.bg_color = '#1e1e2e'      # Dark blue-grey
        self.fg_color = '#cdd6f4'      # Light lavender
        self.widget_bg = '#313244'   # Darker grey
        self.accent_color1 = '#89b4fa' # Blue
        self.accent_color2 = '#f5c2e7' # Pink
        self.button_bg = self.accent_color1
        self.button_fg = '#1e1e2e'
        self.root.configure(bg=self.bg_color)
        self.root.geometry("1400x900")

        # --- Fonts ---
        self.default_font = font.Font(family="Segoe UI", size=10)
        self.title_font = font.Font(family="Segoe UI Semibold", size=14)
        self.mono_font = font.Font(family="Consolas", size=9)

        # --- Student Data ---
        self.num_slots = 34 # The number of dropdown slots
        self.unselected_placeholder = "---" # Placeholder for unselected state
        
        # A map of surnames to full names for the dropdowns
        self.name_map = {
            "中村": "中村颯南", "丸山": "丸山晴生", "会田": "会田心穏", "佐々木": "佐々木琉斗", "佐藤": "佐藤璃音", "内藤": "内藤倖一朗",
            "園部": "園部可憐", "大川": "大川める", "大曽根": "大曽根維月", "大谷": "大谷和輝", "室井": "室井陽人", "小嶋": "小嶋杏奈",
            "小川": "小川快晴", "小林": "小林智宥", "尾形": "尾形勇飛", "山崎": "山崎しおん", "岡田": "岡田悠斗", "有年": "有年禅",
            "水口": "水口夏悟", "河田": "河田愛子", "海老原": "海老原穂鷹", "渡邉": "渡邉美空", "猪野": "猪野夢奈", "田家": "田家瑶姫",
            "田島": "田島大暉", "相場": "相場日菜詩", "秋葉": "秋葉心愛", "薄井": "薄井駿介", "藤澤": "藤澤志帆", "遠藤": "遠藤結衣",
            "鈴木": "鈴木杏奈", "馬場": "馬場美幸", "齋藤": "齋藤優", "山中": "山中壱嵯"
        }
        
        # --- MODIFICATION START ---
        # Define the set of students who should not be in the front row
        self.front_row_restricted_students = {"小林智宥", "大川める", "大曽根維月", "渡邉美空", "水口夏悟", "室井陽人"}
        # --- MODIFICATION END ---

        # This will be populated dynamically based on selections
        self.names = []
        self.num_students = 0
        
        self.cols = 6
        self.rows = 6
        self.vacant_seats = [(0, 0), (0, 5)] 
        
        self.create_widgets()

    def show_message(self, title, message):
        """Displays a custom message box."""
        msg_box = tk.Toplevel(self.root)
        msg_box.title(title)
        msg_box.configure(bg=self.widget_bg)
        
        root_x = self.root.winfo_x()
        root_y = self.root.winfo_y()
        root_w = self.root.winfo_width()
        root_h = self.root.winfo_height()
        msg_w = 400
        msg_h = 150
        msg_x = root_x + (root_w // 2) - (msg_w // 2)
        msg_y = root_y + (root_h // 2) - (msg_h // 2)
        msg_box.geometry(f"{msg_w}x{msg_h}+{msg_x}+{msg_y}")

        msg_label = tk.Label(msg_box, text=message, font=self.default_font, bg=self.widget_bg, fg=self.fg_color, wraplength=380, pady=20)
        msg_label.pack(expand=True, fill="both", padx=10)

        ok_button = tk.Button(msg_box, text="OK", command=msg_box.destroy,
                              font=self.default_font, bg=self.button_bg, fg=self.button_fg,
                              activebackground=self.accent_color2, activeforeground=self.button_fg,
                              relief=tk.FLAT, bd=0, padx=20, pady=5)
        ok_button.pack(pady=(0, 15))

        msg_box.transient(self.root)
        msg_box.grab_set()
        self.root.wait_window(msg_box)

    def create_widgets(self):
        main_frame = tk.Frame(self.root, padx=30, pady=30, bg=self.bg_color)
        main_frame.pack(fill="both", expand=True)
        main_frame.grid_columnconfigure(0, weight=2, uniform="group1")
        main_frame.grid_columnconfigure(1, weight=3, uniform="group1")
        main_frame.grid_rowconfigure(0, weight=1)

        left_frame = tk.Frame(main_frame, bg=self.bg_color)
        left_frame.grid(row=0, column=0, sticky="nsew", padx=(0, 20))

        input_container = tk.LabelFrame(left_frame, text="Enter Student Names", padx=20, pady=20, 
                                    bg=self.widget_bg, fg=self.fg_color, font=self.title_font,
                                    bd=0)
        input_container.pack(pady=(0, 10), fill="x")

        canvas = tk.Canvas(input_container, bg=self.widget_bg, height=400, highlightthickness=0)
        scrollbar = tk.Scrollbar(input_container, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=self.widget_bg)

        scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        self.name_vars = []
        self.dropdowns = []
        num_columns = 3
        for i in range(self.num_slots):
            row, col = divmod(i, num_columns)
            frame = tk.Frame(scrollable_frame, bg=self.widget_bg)
            frame.grid(row=row, column=col, padx=5, pady=5, sticky='w')
            
            label = tk.Label(frame, text=f"{i+1:02d}", bg=self.widget_bg, fg=self.accent_color1, font=self.default_font)
            label.pack(side=tk.LEFT, padx=(0, 5))
            
            selected_surname = tk.StringVar()
            self.name_vars.append(selected_surname)

            dropdown = tk.OptionMenu(frame, selected_surname, self.unselected_placeholder)
            dropdown.config(width=8, font=self.default_font, bg=self.bg_color, fg=self.fg_color,
                            activebackground=self.accent_color1, activeforeground=self.button_fg,
                            relief=tk.SOLID, bd=1, highlightthickness=0)
            dropdown["menu"].config(bg=self.widget_bg, fg=self.fg_color, font=self.default_font,
                                   activebackground=self.accent_color1, activeforeground=self.button_fg)
            dropdown.pack(side=tk.LEFT)
            self.dropdowns.append(dropdown)
        
        for var in self.name_vars:
            var.trace_add("write", self.update_dropdown_options)
        
        self.update_dropdown_options()

        controls_container = tk.Frame(left_frame, bg=self.widget_bg)
        controls_container.pack(fill='x', pady=10)
        
        shuffle_button = tk.Button(controls_container, text="SHUFFLE SEATS", command=self.start_shuffle,
                                   font=self.title_font, bg=self.button_bg, fg=self.button_fg,
                                   activebackground=self.accent_color2, activeforeground=self.button_fg, 
                                   relief=tk.FLAT, bd=0, padx=20, pady=10)
        shuffle_button.pack(pady=20, padx=20, fill='x')

        speed_frame = tk.Frame(controls_container, bg=self.widget_bg)
        speed_frame.pack(pady=(0, 20), padx=20, fill='x')
        speed_label = tk.Label(speed_frame, text="Animation Speed:", bg=self.widget_bg, fg=self.fg_color, font=self.default_font)
        speed_label.pack(side=tk.LEFT)
        self.speed_multiplier = tk.DoubleVar(value=1.0) 
        speeds = [("1x", 1.0), ("8x", 8.0), ("16x", 16.0), ("128x", 128.0)]
        for text, val in speeds:
            rb = tk.Radiobutton(speed_frame, text=text, variable=self.speed_multiplier, value=val, 
                           bg=self.widget_bg, fg=self.fg_color, selectcolor=self.accent_color2,
                           activebackground=self.widget_bg, activeforeground=self.fg_color,
                           font=self.default_font, indicatoron=0, relief=tk.FLAT, bd=0, padx=10, pady=5)
            rb.pack(side=tk.LEFT, padx=5, expand=True, fill='x')
        
        right_frame = tk.Frame(main_frame, bg=self.widget_bg)
        right_frame.grid(row=0, column=1, sticky="nsew", padx=(10, 0))
        right_frame.grid_rowconfigure(0, weight=1)
        right_frame.grid_columnconfigure(0, weight=1)

        self.seating_chart_frame = tk.Frame(right_frame, bg=self.widget_bg)
        self.seating_chart_frame.pack(pady=20, padx=20, expand=True)
        
        seating_art = r"""
███████╗███████╗ █████╗ ████████╗██╗███╗   ██╗ ██████╗      █████╗ ██████╗ ██████╗  ██████╗ ███████╗███╗   ██╗████████╗
██╔════╝██╔════╝██╔══██╗╚══██╔══╝██║████╗  ██║██╔════╝     ██╔══██╗██╔══██╗██╔══██╗██╔════╝ ██╔════╝████╗  ██║╚══██╔══╝
███████╗█████╗  ███████║   ██║   ██║██╔██╗ ██║██║  ███╗    ███████║██████╔╝██████╔╝██║  ███╗█████╗  ██╔██╗ ██║   ██║   
╚════██║██╔══╝  ██╔══██║   ██║   ██║██║╚██╗██║██║   ██║    ██╔══██║██╔══██╗██╔══██╝██║   ██║██╔══╝  ██║╚██╗██║   ██║   
███████║███████╗██║  ██║   ██║   ██║██║ ╚████║╚██████╔╝    ██║  ██║██║  ██║██║  ██║╚██████╔╝███████╗██║ ╚████║   ██║   
╚══════╝╚══════╝╚═╝  ╚═╝   ╚═╝   ╚═╝╚═╝  ╚═══╝ ╚═════╝     ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚═╝  ╚═══╝   ╚═╝   
"""
        self.seating_title_label = tk.Label(self.seating_chart_frame, text=seating_art, font=self.mono_font, justify=tk.LEFT, bg=self.widget_bg, fg=self.accent_color2)
        self.seating_title_label.grid(row=0, column=0, columnspan=self.cols, pady=(0, 20))

        front_label = tk.Label(self.seating_chart_frame, text="--- FRONT OF CLASSROOM ---", bg=self.widget_bg, fg=self.fg_color, font=font.Font(family="Segoe UI", size=10, slant="italic"))
        front_label.grid(row=1, column=0, columnspan=self.cols, pady=(0, 10))

        self.seat_labels = []
        for r in range(self.rows):
            row_labels = []
            for c in range(self.cols):
                seat_frame = tk.Frame(self.seating_chart_frame, width=120, height=60, bg=self.bg_color)
                seat_frame.grid(row=r + 2, column=c, padx=5, pady=5)
                seat_frame.pack_propagate(False)
                label = tk.Label(seat_frame, text="", bg=self.bg_color, fg=self.fg_color, font=self.default_font)
                label.pack(expand=True, fill='both')
                if (r, c) in self.vacant_seats:
                    label.config(text="VACANT", bg='#45475a', font=font.Font(family="Segoe UI Semibold", size=10))
                row_labels.append(label)
            self.seat_labels.append(row_labels)
        
        footer_frame = tk.Frame(right_frame, bg=self.widget_bg)
        footer_frame.pack(pady=10, padx=20, fill=tk.X, side=tk.BOTTOM)
        mit_license_text = "Released under the MIT License"
        license_label = tk.Label(footer_frame, text=mit_license_text, font=self.default_font, bg=self.widget_bg, fg=self.fg_color)
        license_label.pack()
        contact_text1 = "Personal Contact: luruna_anachira.88works@outlook.com"
        contact_label1 = tk.Label(footer_frame, text=contact_text1, font=self.default_font, bg=self.widget_bg, fg=self.fg_color)
        contact_label1.pack()
        contact_text2 = "Religious Contact: root_overclocker@outlook.com"
        contact_label2 = tk.Label(footer_frame, text=contact_text2, font=self.default_font, bg=self.widget_bg, fg=self.fg_color)
        contact_label2.pack()
        github_text = "GitHub: Anachira"
        github_label = tk.Label(footer_frame, text=github_text, font=self.default_font, bg=self.widget_bg, fg=self.fg_color)
        github_label.pack()

    def update_dropdown_options(self, *args):
        """Dynamically update the options in all dropdowns to prevent duplicates."""
        selected_names = {var.get() for var in self.name_vars if var.get() != self.unselected_placeholder}
        all_names = set(self.name_map.keys())
        available_names = sorted(list(all_names - selected_names))

        for i, dropdown in enumerate(self.dropdowns):
            current_selection = self.name_vars[i].get()
            
            new_options = [self.unselected_placeholder]
            if current_selection != self.unselected_placeholder:
                new_options.append(current_selection)
            new_options.extend(available_names)
            
            new_options = [new_options[0]] + sorted(new_options[1:])

            menu = dropdown["menu"]
            menu.delete(0, "end")
            
            for option in new_options:
                menu.add_command(label=option, command=tk._setit(self.name_vars[i], option))

    def start_shuffle(self):
        selected_surnames = [var.get() for var in self.name_vars if var.get() != self.unselected_placeholder]
        
        unique_surnames = list(dict.fromkeys(selected_surnames))
        self.names = [self.name_map[surname] for surname in unique_surnames]
        self.num_students = len(self.names)
        
        if self.num_students < 2:
            self.show_message("Error", "Please select at least two students to start the shuffle.")
            return
        
        # --- MODIFICATION START ---
        # Check if the front row can be filled with unrestricted students
        unrestricted_students = [name for name in self.names if name not in self.front_row_restricted_students]
        
        all_possible_seats = [(r, c) for r in range(self.rows) for c in range(self.cols)]
        available_seats = [seat for seat in all_possible_seats if seat not in self.vacant_seats]
        front_row_seats = [seat for seat in available_seats if seat[0] == 0]

        if len(unrestricted_students) < len(front_row_seats):
            self.show_message("Assignment Error", 
                              "Not enough unrestricted students to fill the front row. "
                              "Please select more students who are not on the restricted list.")
            return
        # --- MODIFICATION END ---
        
        for r in range(self.rows):
            for c in range(self.cols):
                 if (r, c) not in self.vacant_seats:
                    self.seat_labels[r][c].config(text="", bg=self.bg_color)
        self.root.update()
        random.shuffle(self.names)
        self.create_amidakuji_animation()

    def create_amidakuji_animation(self):
        self.animation_window = tk.Toplevel(self.root)
        self.animation_window.title("Amidakuji Shuffle!")
        self.animation_window.configure(bg=self.bg_color)

        screen_width = self.animation_window.winfo_screenwidth()
        screen_height = self.animation_window.winfo_screenheight()
        win_width = int(screen_width * 0.9)
        win_height = int(screen_height * 0.9)
        x_pos = (screen_width - win_width) // 2
        y_pos = (screen_height - win_height) // 2
        self.animation_window.geometry(f"{win_width}x{win_height}+{x_pos}+{y_pos}")

        h_scrollbar = tk.Scrollbar(self.animation_window, orient=tk.HORIZONTAL, bg=self.widget_bg, troughcolor=self.bg_color)
        h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)
        canvas = tk.Canvas(self.animation_window, bg=self.bg_color, xscrollcommand=h_scrollbar.set, highlightthickness=0)
        canvas.pack(side=tk.LEFT, fill="both", expand=True)
        h_scrollbar.config(command=canvas.xview)

        num_verticals = self.num_students
        path_width = int(win_width * 1.5)
        path_height = win_height - 120
        x_start = 50
        y_start = 50
        x_spacing = (path_width - 100) / (num_verticals -1) if num_verticals > 1 else 0

        vertical_lines = []
        for i in range(num_verticals):
            x = x_start + i * x_spacing
            canvas.create_line(x, y_start, x, y_start + path_height, width=2, fill=self.fg_color)
            canvas.create_text(x, y_start - 20, text=self.names[i], font=font.Font(family="Yu Gothic UI", size=10), fill=self.fg_color)
            vertical_lines.append(x)

        ladders = []
        for _ in range(num_verticals * 4): 
            if num_verticals < 2: break
            v_index = random.randint(0, num_verticals - 2)
            y_pos = random.randint(y_start + 40, y_start + path_height - 40)
            
            is_overlapping = False
            for ladder_v, ladder_y in ladders:
                if abs(ladder_y - y_pos) < 20: 
                    if ladder_v == v_index or ladder_v == v_index - 1 or ladder_v == v_index + 1:
                        is_overlapping = True
                        break
            if not is_overlapping:
                ladders.append((v_index, y_pos))

        for v_index, y_pos in ladders:
            x1 = vertical_lines[v_index]
            x2 = vertical_lines[v_index + 1]
            canvas.create_line(x1, y_pos, x2, y_pos, width=2, fill=self.accent_color1)

        canvas.config(scrollregion=canvas.bbox("all"))
        self.root.update()
        
        end_positions = list(range(num_verticals))
        sorted_ladders_calc = sorted(ladders, key=lambda item: item[1])
        for v_idx, _ in sorted_ladders_calc:
            end_positions[v_idx], end_positions[v_idx+1] = end_positions[v_idx+1], end_positions[v_idx]
        
        shuffled_names = [''] * num_verticals
        for start_pos, end_pos in enumerate(end_positions):
            shuffled_names[end_pos] = self.names[start_pos]

        colors = ["#f9e2af", "#f38ba8", "#a6e3a1", "#89b4fa", "#b48ead", "#f5c2e7", "#94e2d5", "#fab387"]
        base_animation_speed = 0.0025
        animation_speed = base_animation_speed / self.speed_multiplier.get()

        for i in range(num_verticals):
            color = colors[i % len(colors)]
            current_x = vertical_lines[i]
            current_y = y_start
            path_tracer = canvas.create_oval(current_x - 5, current_y - 5, current_x + 5, current_y + 5, fill=color, outline=color)
            current_vertical_index = i
            
            for ladder_v_index, ladder_y in sorted_ladders_calc:
                if ladder_v_index == current_vertical_index and ladder_y > current_y:
                    self.animate_move(canvas, path_tracer, current_x, ladder_y, animation_speed, color)
                    current_y = ladder_y
                    next_x = vertical_lines[current_vertical_index + 1]
                    self.animate_move(canvas, path_tracer, next_x, current_y, animation_speed, color)
                    current_x = next_x
                    current_vertical_index += 1
                elif ladder_v_index == current_vertical_index - 1 and ladder_y > current_y:
                    self.animate_move(canvas, path_tracer, current_x, ladder_y, animation_speed, color)
                    current_y = ladder_y
                    next_x = vertical_lines[current_vertical_index - 1]
                    self.animate_move(canvas, path_tracer, next_x, current_y, animation_speed, color)
                    current_x = next_x
                    current_vertical_index -= 1

            self.animate_move(canvas, path_tracer, current_x, y_start + path_height, animation_speed, color)
            canvas.create_text(current_x, y_start + path_height + 25, text=self.names[i], font=font.Font(family="Yu Gothic UI", size=10), fill=color)
        
        self.animation_window.after(1000, lambda: self.update_seating_chart(shuffled_names))
        self.animation_window.after(3000, self.animation_window.destroy)

    def animate_move(self, canvas, item, target_x, target_y, speed, trail_color):
        coords = canvas.coords(item)
        if not coords: return
        current_x = (coords[0] + coords[2]) / 2
        current_y = (coords[1] + coords[3]) / 2
        dx = target_x - current_x
        dy = target_y - current_y
        distance = (dx**2 + dy**2)**0.5
        if distance < 1: return
        steps = int(distance / 2)
        if steps == 0: steps = 1
        vx = dx / steps
        vy = dy / steps

        for _ in range(steps):
            if not canvas.winfo_exists(): return
            start_coords = canvas.coords(item)
            start_x, start_y = (start_coords[0] + start_coords[2]) / 2, (start_coords[1] + start_coords[3]) / 2
            canvas.move(item, vx, vy)
            end_coords = canvas.coords(item)
            end_x, end_y = (end_coords[0] + end_coords[2]) / 2, (end_coords[1] + end_coords[3]) / 2
            canvas.create_line(start_x, start_y, end_x, end_y, fill=trail_color, width=4, capstyle=tk.ROUND)
            self.root.update()
            time.sleep(speed)

    def update_seating_chart(self, shuffled_names):
        # --- MODIFICATION START ---
        # Get all available seats
        all_possible_seats = [(r, c) for r in range(self.rows) for c in range(self.cols)]
        available_seats = [seat for seat in all_possible_seats if seat not in self.vacant_seats]
        
        # Create initial assignments based on shuffle results
        assignments = {seat: name for seat, name in zip(available_seats, shuffled_names)}
        
        # Identify problematic assignments (restricted student in front row)
        problem_assignments = []
        for seat, name in assignments.items():
            if seat[0] == 0 and name in self.front_row_restricted_students:
                problem_assignments.append((seat, name))

        # Identify potential solutions (unrestricted student not in front row)
        solution_assignments = []
        for seat, name in assignments.items():
            if seat[0] != 0 and name not in self.front_row_restricted_students:
                solution_assignments.append((seat, name))
        
        # Swap assignments to fix problems
        for p_seat, p_name in problem_assignments:
            if not solution_assignments:
                break # Should not happen due to the check in start_shuffle
            
            # Pop a solution
            s_seat, s_name = solution_assignments.pop(0)
            
            # Swap the names in the assignment dictionary
            assignments[p_seat] = s_name
            assignments[s_seat] = p_name

        # Update the seat labels based on the final assignments
        name_index = 0
        for r in range(self.rows):
            for c in range(self.cols):
                seat_pos = (r, c)
                if seat_pos not in self.vacant_seats:
                    if seat_pos in assignments:
                        student_name = assignments[seat_pos]
                        self.seat_labels[r][c].config(text=student_name, bg=self.accent_color2, fg=self.bg_color, font=font.Font(family="Yu Gothic UI Semibold", size=10))
                    else:
                        # This seat is available but not filled (less students than seats)
                        self.seat_labels[r][c].config(text="", bg=self.bg_color)
        # --- MODIFICATION END ---


if __name__ == "__main__":
    root = tk.Tk()
    app = AmidakujiApp(root)
    root.mainloop()
